#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

#define SIZE 100

char stack[SIZE];
int top = -1;

void push(char c) {
    if (top == SIZE - 1)
        printf("Stack Overflow!\n");
    else
        stack[++top] = c;
}

char pop() {
    if (top == -1)
        return -1;
    return stack[top--];
}

int precedence(char c) {
    switch (c) {
        case '^': return 3;
        case '*':
        case '/':
        case '%': return 2;
        case '+':
        case '-': return 1;
        default: return 0;
    }
}

int main() {
    char infix[SIZE], postfix[SIZE];
    int i = 0, j = 0;
    char token, temp;

    printf("Enter infix expression: ");
    fgets(infix, SIZE, stdin);
    infix[strcspn(infix, "\n")] = '\0';

    while ((token = infix[i++]) != '\0') {
        if (isalnum(token))
            postfix[j++] = token;
        else if (token == '(')
            push(token);
        else if (token == ')') {
            while ((temp = pop()) != '(')
                postfix[j++] = temp;
        } else {
            while (precedence(stack[top]) >= precedence(token))
                postfix[j++] = pop();
            push(token);
        }
    }

    while (top != -1)
        postfix[j++] = pop();

    postfix[j] = '\0';
    printf("Postfix Expression: %s\n", postfix);

    return 0;
}


